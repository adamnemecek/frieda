#!/bin/bash
set -e

RESULTS_FILE="benchmarks.txt"#${1:-"benchmarks.txt"}
commit_hashes=(
    "48b84ff"
    "650c51c"
)
echo "Benchmarking for commit hashes: ${commit_hashes[@]}" > $RESULTS_FILE

CARGO_TOML="$(pwd)/bench/Cargo.toml"

# Function to update the Cargo.toml with a given commit hash
update_cargo_toml() {
  local commit_hash=$1
  sed -i.bak "s/^automata = { .* }$/automata = { git = \"https:\/\/github.com\/leonbohn\/automata\", rev = \"$commit_hash\" }/" $CARGO_TOML
}

# Function to build the binary
build_binary() {
  local feature=$1
  local hash=$2
  cargo build --release --features "commit_$feature" --manifest-path $CARGO_TOML 2>&1 > /dev/null
  if [ $? -ne 0 ]; then
    echo -e "\033[31m Build failed for commit $hash\033[30m"
    exit 1
  fi
}

flamegraph() {
  local feature=$1
  cargo flamegraph --release --features "commit_$feature" --manifest-path $CARGO_TOML
  cp ./bench/flamegraph.svg ./bench/flamegraph_$feature.svg
}


# Clear previous results
echo -e "\033[34mBenchmarking Results\033[0m" > $RESULTS_FILE

# Loop over all commit hashes
for i in "${!commit_hashes[@]}"; do
  commit_hash=${commit_hashes[$i]}
  if [ -f "./bench/built-automata-benchmarks-$i-$commit_hash" ]; then
    echo -e "\033[34mBinary for commit ${commit_hashes[$i]} already exists\033[0m"
    continue
  fi
  echo -e "\033[34mBuilding binary for commit ${commit_hashes[$i]} already exists\033[0m"

  # Update the Cargo.toml with the new commit hash
  update_cargo_toml $commit_hash

  # Build the binary
  build_binary $i $commit_hash
  cp ./bench/target/release/automata-benchmarks ./bench/built-automata-benchmarks-$i-$commit_hash
  # flamegraph $i
done

echo -e "\033[Building for latest...\033[0m"
sed -i.bak "s/^automata = { .* }$/automata = { path=\"..\/automata\" }/" $CARGO_TOML
build_binary 3 "latest"
cp ./bench/target/release/automata-benchmarks ./bench/built-automata-benchmarks-latest

hyperfine --warmup 5 --ignore-failure --runs 20 ./bench/built-automata-benchmarks-* --export-csv benchmarks.csv

